// Generated by CoffeeScript 1.8.0
(function() {
  var apiBase, app;

  apiBase = '/api/v1';

  app = angular.module('scruxApp', ['ui.router', 'ngCookies', 'toaster']).config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('users', {
      abstract: true,
      template: '<ui-view/>',
      data: {
        auth: false
      }
    }).state('users.login', {
      url: '/login',
      templateUrl: 'partials/users/login.html',
      controller: 'LoginCtrl'
    }).state('users.logout', {
      url: '/logout',
      controller: 'LoginCtrl',
      data: {
        auth: true
      }
    });
    return $stateProvider.state('todos', {
      abstract: true,
      template: '<ui-view/>',
      data: {
        auth: true
      }
    }).state('todos.index', {
      url: '/todos',
      templateUrl: 'partials/todos/index.html',
      controller: 'TodosCtrl'
    });
  }).run(function($rootScope, $state, Auth, toaster) {
    return $rootScope.$on('$stateChangeStart', function(event, toState) {
      if (toState.name === 'users.login' && Auth.isLoggedIn()) {
        toaster.pop('warning', 'You are already logged in.');
        $state.transitionTo('todos.index');
        return event.preventDefault();
      } else if (toState.data.auth && !Auth.isLoggedIn()) {
        toaster.pop('error', 'Authentication required.', 'Please log in.');
        $state.transitionTo('users.login');
        return event.preventDefault();
      }
    });
  }).factory('Auth', function($http, $cookieStore, $rootScope) {
    var user;
    user = $cookieStore.get('user') || null;
    $rootScope.user = user;
    if (user) {
      $http.defaults.headers.common.username = user.username;
      $http.defaults.headers.common.token = user.token;
    }
    return {
      user: user,
      isLoggedIn: function() {
        return this.user !== null;
      },
      login: function(user, success, error) {
        return $http.post("" + apiBase + "/users/login", user).success((function(_this) {
          return function(res) {
            _this.user = {
              username: user.username,
              token: res.token
            };
            $cookieStore.put('user', _this.user);
            $http.defaults.headers.common.username = _this.user.username;
            $http.defaults.headers.common.token = _this.user.token;
            $rootScope.user = _this.user;
            return success();
          };
        })(this)).error(error);
      },
      logout: function(success, error) {
        return $http.get("" + apiBase + "/users/logout").success((function(_this) {
          return function() {
            _this._logout();
            return success();
          };
        })(this)).error(error);
      },
      _logout: function() {
        this.user = null;
        $cookieStore.put('user', this.user);
        delete $http.defaults.headers.common.username;
        delete $http.defaults.headers.common.token;
        return $rootScope.user = this.user;
      }
    };
  }).factory('Todo', function($http, Auth) {
    return {
      get: function(success, error) {
        return $http.get("" + apiBase + "/todos").success(success).error(error);
      },
      "delete": function(id, success, error) {
        return $http["delete"]("" + apiBase + "/todos/" + id).success(success).error(error);
      },
      update: function(id, data, success, error) {
        return $http.put("" + apiBase + "/todos/" + id, data).success(success).error(error);
      }
    };
  }).controller('LoginCtrl', function($scope, $state, Auth, toaster) {
    $scope.login = function() {
      return Auth.login({
        username: $scope.username,
        password: $scope.password
      }, function() {
        toaster.pop('success', "You're in!", 'You have been successfully logged in.');
        return $state.transitionTo('todos.index');
      }, function(err) {
        toaster.pop('error', 'Oops!', 'Invalid credentials.');
        return Auth._logout();
      });
    };
    $scope.logout = function() {
      return Auth.logout(function() {
        toaster.pop('success', 'Logged out.');
        return $state.transitionTo('users.login');
      }, function(err) {
        return toaster.pop('error', 'Oops!', 'An error occurred');
      });
    };
    if ($state.current.name === 'users.logout') {
      return $scope.logout();
    }
  }).controller('TodosCtrl', function($scope, $state, Todo, toaster) {
    $scope.loadTodos = function() {
      return Todo.get(function(todos) {
        return $scope.todos = todos;
      }, function(res, code) {
        if (code === 403) {
          toaster.pop('error', 'Authentication required.', 'Please log in.');
          Auth._logout();
          return $state.go('users.login');
        } else {
          return toaster.pop('error', 'Oops!', 'An error occurred.');
        }
      });
    };
    $scope.loadTodos();
    $scope["delete"] = function(index) {
      var id;
      id = $scope.todos[index].id;
      return Todo["delete"](id, function() {
        toaster.pop('success', 'Todo deleted');
        return $scope.loadTodos();
      }, function(res, code) {
        toaster.pop('error', 'Oops!', 'An error occurred.');
        return console.log(res, code);
      });
    };
    return $scope.toggle = function(index) {
      var todo;
      todo = $scope.todos[index];
      return Todo.update(todo.id, {
        done: !todo.done
      }, function() {
        toaster.pop('success', 'Todo toggled');
        return $scope.loadTodos();
      }, function(res, code) {
        toaster.pop('error', 'Oops!', 'An error occurred.');
        return console.log(res, code);
      });
    };
  });

}).call(this);

//# sourceMappingURL=app.js.map
